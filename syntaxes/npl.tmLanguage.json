{
  "scopeName": "source.npl",
  "patterns": [
    {
      "include": "#annotations"
    },
    {
      "include": "#control-flow-keywords"
    },
    {
      "include": "#user-defined-types-keywords"
    },
    {
      "include": "#permission-obligation-keywords"
    },
    {
      "include": "#state-keywords"
    },
    {
      "include": "#package-keywords"
    },
    {
      "include": "#generic-keywords"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#braces"
    },
    {
      "include": "#semicolons"
    },
    {
      "include": "#types"
    },
    {
      "include": "#function-calls"
    },
    {
      "include": "#type-instantiations"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "annotations": {
      "patterns": [
        {
          "name": "support.annotation.npl",
          "match": "@[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "control-flow-keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.npl",
          "match": "\\b(if|else|return|become|match|for|in|is|otherwise|resume|guard|require|after|before|between|and|with|copy)\\b"
        }
      ]
    },
    "generic-keywords": {
      "patterns": [
        {
          "name": "keyword.generic.npl",
          "match": "\\b(private|var|returns|function|const|this|native|optional|vararg|init|notify|symbol|notification)\\b"
        }
      ]
    },
    "user-defined-types-keywords": {
      "patterns": [
        {
          "name": "keyword.control.types.npl",
          "match": "\\b(protocol|struct|enum|union|identifier)\\b"
        }
      ]
    },
    "permission-obligation-keywords": {
      "patterns": [
        {
          "name": "keyword.control.permission-obligation.npl",
          "match": "\\b(permission|obligation)\\b"
        }
      ]
    },
    "state-keywords": {
      "patterns": [
        {
          "name": "keyword.control.state.npl",
          "match": "\\b(state|initial|final)\\b"
        }
      ]
    },
    "package-keywords": {
      "patterns": [
        {
          "name": "keyword.control.package.npl",
          "match": "\\b(package|use)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.npl",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.npl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.npl",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.npl",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.npl",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.npl",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.npl",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "braces": {
      "patterns": [
        {
          "name": "punctuation.definition.brackets.npl",
          "match": "[{}\\[\\]\\(\\)]"
        }
      ]
    },
    "semicolons": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.npl",
          "match": ";"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.npl",
          "match": "(\\+|\\-|\\*|\\/|<=?|>=?|==|!=|\\|\\||&&|!|=|\\.)"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "basic.type.npl",
          "match": "\\b(Blob|Boolean|DateTime|Duration|LocalDate|Number|Period|Text|Unit)\\b"
        },
        {
          "name": "collection.type.npl",
          "match": "\\b(List|Map|Set)\\b"
        },
        {
          "name": "complex.type.npl",
          "match": "\\b(IndexedElement|NotifyResult|Optional|Pair|Party|Test)\\b"
        },
        {
          "name": "other.type.npl",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "entity.name.function.npl",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "type-instantiations": {
      "patterns": [
        {
          "name": "entity.name.type.npl",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\s*(?=(\\(|\\[))"
        }
      ]
    }
  }
}
